void BinaryTree::Postorder_Stack(NODE* rootNode)

{

        NODE *indexNode = rootNode;

        NODE *doneNode = NULL;        //출력을 완료한 노드

 

        m_Stack.Clear();

 

        while (true)

        {

               if (indexNode != NULL && indexNode != doneNode)

               {

                       //현재노드 스택에 입력

                       m_Stack.Push(indexNode);

 

                       //현재 노드에서 도달 할 수 있는 최좌측 노드 찾기 & 경로에 있는 노드들 저장

                       do

                       {

                              //현재 노드의 우측 스택에 입력(NULL이 아니라면)

                              StackNode(indexNode->Right);

 

                              //현재 노드의 좌측 스택에 입력(NULL이 아니라면)

                              StackNode(indexNode->Left);

 

                              //다음 좌측 노드 지정

                              indexNode = indexNode->Left;

 

                       } while (indexNode != NULL);//NULL이 나올때까지 반복

               }

                      

               //스택에 노드가 있다면

               if (!m_Stack.IsEmpty())

               {

                       //가장 늦게 입력된 노드 수령

                       indexNode = m_Stack.Pop();

 

                       //예외 처리 =>조건01 : 오른쪽 노드일것, 조건02: 왼쪽 자식만 있을 것       

                       if (indexNode->Left != NULL && indexNode->Right == NULL && indexNode->Left != doneNode)

                       {

                              StackNode(indexNode);

                              indexNode = indexNode->Left;

                       }

 

                       //오른쪽 노드가 NULL이거나 이미 완료한 노드라면 출력

                       //후위 순회에서 부모노드의 순서는 좌측 자식-> 우측 자식-> 자신

                       //즉, 우측 노드가 완료(여기선 출력) 혹은 없다면 자신을 출력 할 수 있다.

                       if (indexNode->Right == NULL || indexNode->Right == doneNode)

                       {

                              //노드 데이터 출력

                              PrintNode(indexNode->Data);

 

                              //완료 노드로 지정

                              doneNode = indexNode;

                       }

               }

               else

                       break;

        }

}